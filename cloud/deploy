#!/usr/bin/env bash

set -e # Exit on error
set -x # Echo commands

echo "===== STARTING DEPLOYMENT ====="

# Check if the database already has migrations table
if php artisan db:table-exists migrations; then
    # If migrations table exists, run migrations with --force
    echo "Running migrations on existing database..."
    php artisan migrate --force
else
    # If migrations table doesn't exist, run fresh migrations
    echo "Setting up fresh database..."
    php artisan migrate
fi

# Check if the build directory exists in public
if [ ! -d "public/build" ]; then
    echo "===== BUILD DIRECTORY MISSING - BUILDING ASSETS LOCALLY ====="
    # Ensure node_modules are installed
    npm ci --no-audit
    # Build the assets
    npm run build
    # Show the build directory contents
    ls -la public/build/
else
    echo "===== BUILD DIRECTORY EXISTS ====="
    ls -la public/build/
fi

# Verify that the Vite manifest exists
if [ ! -f public/build/manifest.json ]; then
    echo "===== MANIFEST FILE MISSING - CREATING FALLBACK ====="
    # Run the artisan command to create a fallback manifest
    php artisan vite:fix-manifest --force
else
    echo "===== MANIFEST FILE EXISTS ====="
    # Show the manifest file contents
    cat public/build/manifest.json
fi

# Ensure proper ownership and permissions
echo "===== SETTING PROPER PERMISSIONS ====="
# Laravel directories that need to be writable
WRITABLE_DIRS="storage bootstrap/cache public/build"

for dir in $WRITABLE_DIRS; do
    if [ -d "$dir" ]; then
        echo "Setting permissions for $dir"
        chmod -R 775 "$dir"
    else
        echo "Directory $dir does not exist!"
    fi
done

# Run other deployment commands
echo "===== CACHING CONFIGURATION ====="
php artisan config:cache
php artisan route:cache
php artisan view:cache
php artisan storage:link

# Output confirmation
echo "===== DEPLOYMENT COMPLETED SUCCESSFULLY ====="
